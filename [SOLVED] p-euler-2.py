# -*- coding: utf-8 -*-
"""

Created on Tue Oct 10 19:04:04 2017

@author: Benz

--- PROJECT EULER - PROBLEM 2 ---

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.

"""

import time

start_time = time.time()

sumOfNum = 0
num1 = 0 # (x) first initial base number in relation to fib sequence addition [x + y]
num2 = 1 # (y) second initial base number in relation to fib sequence addition [x + y]

while num2 <= 4000000: # num2 will be the leading number, thus condition to not exceed four million
    if num2 % 2 == 0: # check if leading number it's an even number
        sumOfNum += num2 # if its even add it to the sum (since we're getting sum of the even fibs)
    num1, num2 = num2, (num1 + num2) # increases the base numbers. where num2 is the latest fibonacci number...
                                     # and num1 is now the previous fibonacci number (the old num2). 
    

print(sumOfNum)
print('--- %s seconds ---' % (time.time() - start_time))